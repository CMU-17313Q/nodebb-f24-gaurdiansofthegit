{{{ if (brand:logo || config.showSiteTitle) }}}
<div class="container-lg px-md-4 brand-container">
    <div class="col-12 d-flex border-bottom pb-3 {{{ if config.theme.centerHeaderElements }}}justify-content-center{{{ end }}}">

        <div component="brand/wrapper" class="d-flex align-items-center gap-3 p-2 rounded-1 align-content-stretch">
            {{{ if brand:logo }}}
            <a component="brand/anchor" href="{{{ if brand:logo:url }}}{brand:logo:url}{{{ else }}}{relative_path}/{{{ end }}}" title="[[global:header.brand-logo]]">
                <img component="brand/logo" alt="{{{ if brand:logo:alt }}}{brand:logo:alt}{{{ else }}}[[global:header.brand-logo]]{{{ end }}}" class="{brand:logo:display}" src="{brand:logo}?{config.cache-buster}" />
            </a>
            {{{ end }}}
            {{{ if config.showSiteTitle }}}
            <a component="siteTitle" class="text-truncate align-self-stretch align-items-center d-flex" href="{{{ if title:url }}}{title:url}{{{ else }}}{relative_path}/{{{ end }}}">
                <h1 class="fs-6 fw-bold text-body mb-0">{config.siteTitle}</h1>
            </a>
            {{{ end }}}
        </div>
        // GPT assited code

        <!-- Conditionally render the links based on URL -->
        <script>
            // Utility to detect URL changes
            function watchUrlChanges(callback) {
                let lastUrl = window.location.href;
                new MutationObserver(() => {
                    const currentUrl = window.location.href;
                    if (currentUrl !== lastUrl) {
                        lastUrl = currentUrl;
                        callback();  // URL changed, trigger the callback
                    }
                }).observe(document, { subtree: true, childList: true });
            }

            function updateLinks() {
                console.log("Function updateLinks called");

                // Capture the current URL pathname
                var currentUrl = window.location.pathname;
                console.log("Current URL pathname: ", currentUrl);

                // Remove existing links (if any)
                var existingLinksContainer = document.querySelector('.dynamic-links-container');
                if (existingLinksContainer) {
                    existingLinksContainer.remove();
                }

                // Check if we are on the homepage
                if (currentUrl === '/' || currentUrl === '') {
                    console.log("Homepage detected. No links will be added.");
                    return;
                }

                // Check if we are on a category page
                if (currentUrl.startsWith('/category/')) {
                    console.log("Category page detected. Adding category links.");

                    // Create a container for the new links
                    var linksContainer = document.createElement('div');
                    linksContainer.className = 'dynamic-links-container d-flex';

                    // Define category links
                    var categories = [
                        { url: '{config.relative_path}/category/1/announcements', text: 'Announcements' },
                        { url: '{config.relative_path}/category/2/general-discussion', text: 'General Discussion' },
                        { url: '{config.relative_path}/category/4/comments-feedback', text: 'Comments & Feedback' },
                        { url: '{config.relative_path}/category/3/blogs', text: 'Blogs' }
                    ];

                    // Iterate through categories and add links
                    categories.forEach(function(category) {
                        if (currentUrl !== category.url) {
                            appendLink(linksContainer, category);
                        }
                    });

                    // Append the links container to the header if any links were added
                    if (linksContainer.children.length > 0) {
                        document.querySelector('.brand-container .col-12').appendChild(linksContainer);
                    }
                }
            }

            function appendLink(container, link) {
                var navItem = document.createElement('div');
                navItem.className = 'nav-item mx-2';

                var anchor = document.createElement('a');
                anchor.className = 'text-reset';
                anchor.href = link.url;
                anchor.textContent = link.text;

                navItem.appendChild(anchor);
                container.appendChild(navItem);
            }

            // Initial call when DOM is ready
            document.addEventListener('DOMContentLoaded', function() {
                console.log("DOMContentLoaded event fired. Calling updateLinks.");
                updateLinks();

                // Watch for URL changes and update links dynamically
                watchUrlChanges(function() {
                    console.log("URL change detected. Calling updateLinks.");
                    updateLinks();
                });
            });

        </script>

        {{{ if widgets.brand-header.length }}}
        <div data-widget-area="brand-header" class="flex-fill gap-3 p-2 align-self-center">
            {{{ each widgets.brand-header }}}
            {{ ./html }}
            {{{ end }}}
        </div>
        {{{ end }}}
    </div>
</div>
//GPT assited code 
<style>
    /* Ensure brand logo and links are vertically aligned */
    .brand-container {
        display: flex;
        align-items: center;  /* Vertically center logo and links */
    }

    /* Ensure navigation links are properly spaced and aligned */
    .dynamic-links-container {
        display: flex;
        align-items: center;  /* Vertically center the links */
        gap: 20px;  /* Space between links */
        margin-left: auto;  /* Push links to the right of the logo if needed */
    }

    /* Optional: Add some padding to the brand logo for better alignment */
    [component="brand/logo"] {
        max-height: 40px;  /* Adjust size of the logo */
    }

    .nav-item a {
        font-size: 14px;  /* Adjust link size if needed */
        padding: 5px 10px;  /* Add padding for better click area */
        text-decoration: none;  /* Remove underline by default */
        transition: color 0.3s, text-decoration 0.3s;  /* Smooth transition effect */
    }

    /* Underline effect on hover */
    .nav-item a:hover {
        text-decoration: underline;  /* Add underline on hover */
    }
</style>

{{{ end }}}
