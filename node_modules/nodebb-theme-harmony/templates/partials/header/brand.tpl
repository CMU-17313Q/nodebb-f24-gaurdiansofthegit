{{{ if (brand:logo || config.showSiteTitle) }}}
<div class="container-lg px-md-4 brand-container">
    <div class="col-12 d-flex border-bottom pb-3 {{{ if config.theme.centerHeaderElements }}}justify-content-center{{{ end }}}">

        <div component="brand/wrapper" class="d-flex align-items-center gap-3 p-2 rounded-1 align-content-stretch">
            {{{ if brand:logo }}}
            <a component="brand/anchor" href="{{{ if brand:logo:url }}}{brand:logo:url}{{{ else }}}{relative_path}/{{{ end }}}" title="[[global:header.brand-logo]]">
                <img component="brand/logo" alt="{{{ if brand:logo:alt }}}{brand:logo:alt}{{{ else }}}[[global:header.brand-logo]]{{{ end }}}" class="{brand:logo:display}" src="{brand:logo}?{config.cache-buster}" />
            </a>
            {{{ end }}}
            {{{ if config.showSiteTitle }}}
            <a component="siteTitle" class="text-truncate align-self-stretch align-items-center d-flex" href="{{{ if title:url }}}{title:url}{{{ else }}}{relative_path}/{{{ end }}}">
                <h1 class="fs-6 fw-bold text-body mb-0">{config.siteTitle}</h1>
            </a>
            {{{ end }}}
        </div>

        <!-- Conditionally render the links next to the logo based on URL -->
        <script>
            let debounceTimeout;

            function updateLinks() {
                var currentUrl = window.location.pathname;
                console.log("CURRENT URL IS ", currentUrl)

                // Clear existing links
                var existingLinksContainer = document.querySelector('.dynamic-links-container');
                if (existingLinksContainer) {
                    existingLinksContainer.remove();
                }

                var linksContainer = document.createElement('div');
                linksContainer.className = 'd-flex align-items-center gap-3 dynamic-links-container';

                // Define categories and their respective URLs
                var categories = [
                    { url: '{config.relative_path}/category/1/announcements', text: 'Announcements' },
                    { url: '{config.relative_path}/category/2/general-discussion', text: 'General Discussion' },
                    { url: '{config.relative_path}/category/4/comments-feedback', text: 'Comments & Feedback' },
                    { url: '{config.relative_path}/category/3/blogs', text: 'Blogs' }
                ];

                // Check current URL and append links conditionally
                if (currentUrl !== categories[0].url) { // Announcements
                    appendLinks(linksContainer, categories[0]);
                }
                if (currentUrl !== categories[1].url) { // General Discussion
                    appendLinks(linksContainer, categories[1]);
                }
                if (currentUrl !== categories[2].url) { // Comments & Feedback
                    appendLinks(linksContainer, categories[2]);
                }
                if (currentUrl !== categories[3].url) { // Blogs
                    appendLinks(linksContainer, categories[3]);
                }

                // Append linksContainer to the existing header container if it has children
                if (linksContainer.children.length > 0) {
                    document.querySelector('.brand-container .col-12').appendChild(linksContainer);
                }
            }

            // Function to append a link to the linksContainer
            function appendLinks(container, link) {
                var navItem = document.createElement('div');
                navItem.className = 'nav-item mx-2';

                var anchor = document.createElement('a');
                anchor.className = 'text-reset';
                anchor.href = link.url;  // Use dynamic URL here
                anchor.textContent = link.text;

                navItem.appendChild(anchor);
                container.appendChild(navItem);
            }

            // Debounce wrapper for updateLinks
            function debounce(func, delay) {
                return function() {
                    clearTimeout(debounceTimeout);
                    debounceTimeout = setTimeout(func, delay);
                };
            }

            // Initial call to update links
            document.addEventListener('DOMContentLoaded', updateLinks);

            // Set up a MutationObserver to observe changes in the specific element (e.g., brand-container)
            const observerTarget = document.querySelector('.brand-container');
            if (observerTarget) {
                const observer = new MutationObserver(debounce(updateLinks, 700));
                observer.observe(observerTarget, { childList: true, subtree: true });
            }
        </script>

        {{{ if widgets.brand-header.length }}}
        <div data-widget-area="brand-header" class="flex-fill gap-3 p-2 align-self-center">
            {{{ each widgets.brand-header }}}
            {{ ./html }}
            {{{ end }}}
        </div>
        {{{ end }}}
    </div>
</div>
{{{ end }}}